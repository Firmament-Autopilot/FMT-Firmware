import os
import sys
import rtconfig

# FMT path
FMU_ROOT = os.path.normpath(os.getcwd() + '/../../..')
# RTOS path
RTT_ROOT = FMU_ROOT + '/rtos/rt-thread'

sys.path = sys.path + [os.path.join(RTT_ROOT, 'tools')]
try:
    from building import *
except:
    print('Cannot found RT-Thread root directory, please check RTT_ROOT')
    print(RTT_ROOT)
    exit(-1)

TARGET = 'build/fmt_' + rtconfig.BOARD + '.' + rtconfig.TARGET_EXT

# ===== Add option to SCons =====
AddOption('--vehicle',
                dest = 'vehicle',
                type = 'string',
                default = 'Multicopter',
                help = 'Specify the vehicle type')

AddOption('--airframe', 
                dest='airframe', 
                type='int', 
                nargs=1, 
                default = 1, 
                action='store',
                help='Specify the airframe value')

env = Environment(tools=['mingw'],
                  AS=rtconfig.AS, ASFLAGS=rtconfig.AFLAGS,
                  CC=rtconfig.CC, CFLAGS=rtconfig.CFLAGS,
                  AR=rtconfig.AR, ARFLAGS='-rc',
                  CXX=rtconfig.CXX, CXXFLAGS=rtconfig.CXXFLAGS,
                  LINK=rtconfig.LINK, LINKFLAGS=rtconfig.LFLAGS)

# set VEHICLE_TYPE macro for low-level usage
env.Append(CPPDEFINES = [('VEHICLE_TYPE', GetOption('vehicle'))])
env.Append(CPPDEFINES = [('AIRFRAME', GetOption('airframe'))])

# Add sys execute PATH to env PATH
env.PrependENVPath('PATH', os.getenv('PATH'))

env.PrependENVPath('PATH', rtconfig.EXEC_PATH)

if rtconfig.PLATFORM == 'iar':
    env.Replace(
        CCCOM=['$CC $CCFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS -o $TARGET $SOURCES'])
    env.Replace(ARFLAGS=[''])
    env.Replace(
        LINKCOM=['$LINK $SOURCES $LINKFLAGS -o $TARGET --map project.map'])

Export('RTT_ROOT')
Export('rtconfig')

# prepare building environment
objs = PrepareBuilding(env, RTT_ROOT, has_libcpu=False)

cwd = str(Dir('#'))
list = os.listdir(FMU_ROOT)
vdir = 'build/fmt'
for d in list:
    path = os.path.join(FMU_ROOT, d)
    if os.path.isfile(os.path.join(path, 'SConscript')):
        objs.extend(SConscript(os.path.join(path, 'SConscript'),
                    variant_dir=vdir + '/' + d, duplicate=0))

# print env.get('CPPPATH', [''])

# make a building
DoBuilding(TARGET, objs)
